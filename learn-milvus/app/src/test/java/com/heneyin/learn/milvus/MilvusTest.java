/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.heneyin.learn.milvus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import io.milvus.v2.client.ConnectConfig;
import io.milvus.v2.client.MilvusClientV2;
import io.milvus.v2.common.DataType;
import io.milvus.v2.common.IndexParam;
import io.milvus.v2.service.collection.request.AddFieldReq;
import io.milvus.v2.service.collection.request.CreateCollectionReq;
import io.milvus.v2.service.collection.request.DescribeCollectionReq;
import io.milvus.v2.service.collection.request.GetLoadStateReq;
import io.milvus.v2.service.collection.response.DescribeCollectionResp;
import io.milvus.v2.service.collection.response.ListCollectionsResp;
import io.milvus.v2.service.vector.request.InsertReq;
import io.milvus.v2.service.vector.request.SearchReq;
import io.milvus.v2.service.vector.request.data.FloatVec;
import io.milvus.v2.service.vector.response.InsertResp;
import io.milvus.v2.service.vector.response.SearchResp;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class MilvusTest {

    private Gson gson;

    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    private static String CLUSTER_ENDPOINT = "http://localhost:19530";
    private static String TOKEN = "root:Milvus";

    private MilvusClientV2 client;

    @BeforeEach
    void setUp() {
        // 1. Connect to Milvus server
        ConnectConfig connectConfig = ConnectConfig.builder()
                .uri(CLUSTER_ENDPOINT)
                .token(TOKEN)
                .build();

        this.client = new MilvusClientV2(connectConfig);

        this.gson = new GsonBuilder()
                .setPrettyPrinting()  // 设置格式化输出
                .create();
    }

    @Test
    public void create_schema_and_collection() {

        // 3. Create a collection in customized setup mode

        // 3.1 Create schema
        CreateCollectionReq.CollectionSchema schema = client.createSchema();

        // 3.2 Add fields to schema
        schema.addField(AddFieldReq.builder()
                .fieldName("my_id")
                .dataType(DataType.Int64)
                .isPrimaryKey(true)
                .autoID(false)
                .build());

        schema.addField(AddFieldReq.builder()
                .fieldName("my_vector")
                .dataType(DataType.FloatVector)
                .dimension(5)
                .build());

        schema.addField(AddFieldReq.builder()
                .fieldName("my_varchar")
                .dataType(DataType.VarChar)
                .maxLength(512)
                .build());

        // 3.3 Prepare index parameters
        IndexParam indexParamForIdField = IndexParam.builder()
                .fieldName("my_id")
                .indexType(IndexParam.IndexType.AUTOINDEX)
                .build();

        IndexParam indexParamForVectorField = IndexParam.builder()
                .fieldName("my_vector")
                .indexType(IndexParam.IndexType.AUTOINDEX)
                .metricType(IndexParam.MetricType.COSINE)
                .build();

        List<IndexParam> indexParams = new ArrayList<>();
        indexParams.add(indexParamForIdField);
        indexParams.add(indexParamForVectorField);

        // 3.4 Create a collection with schema and index parameters
        CreateCollectionReq customizedSetupReq1 = CreateCollectionReq.builder()
                .collectionName("customized_setup_1")
                .collectionSchema(schema)
                .indexParams(indexParams)
                .build();

        client.createCollection(customizedSetupReq1);

        // 3.5 Get load state of the collection
        GetLoadStateReq customSetupLoadStateReq1 = GetLoadStateReq.builder()
                .collectionName("customized_setup_1")
                .build();

        Boolean loaded = client.getLoadState(customSetupLoadStateReq1);
        System.out.println(loaded);

        // Output:
        // true

        // 3.6 Create a collection and index it separately
        // The following code snippet demonstrates how to create a collection without a index,
        // and the load status of the collection remains unloaded upon creation.
        CreateCollectionReq customizedSetupReq2 = CreateCollectionReq.builder()
                .collectionName("customized_setup_2")
                .collectionSchema(schema)
                .build();

        client.createCollection(customizedSetupReq2);

        GetLoadStateReq customSetupLoadStateReq2 = GetLoadStateReq.builder()
                .collectionName("customized_setup_2")
                .build();

        Boolean loaded1 = client.getLoadState(customSetupLoadStateReq2);
        System.out.println(loaded1);
        // false
    }

    /**
     * The following example demonstrates how to obtain the name list of all collections in the currently connected database.
     */
    @Test
    public void list_collections() {
        ListCollectionsResp resp = client.listCollections();
        System.out.println(resp.getCollectionNames());
        // [customized_setup_1, customized_setup_2]
    }

    @Test
    public void describe_collection() {
        DescribeCollectionReq request = DescribeCollectionReq.builder()
                .collectionName("customized_setup_1")
                .build();
        DescribeCollectionResp resp = client.describeCollection(request);
        String respJson = gson.toJson(resp);
        System.out.println(respJson);
    }

    @Test
    public void insert_entity_into_collection() {
        List<JsonObject> data = Arrays.asList(
            gson.fromJson("{\"my_id\": 0, \"my_vector\": [0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f], \"my_varchar\": \"hello world\"}", JsonObject.class),
            gson.fromJson("{\"my_id\": 1, \"my_vector\": [0.19886812562848388f, 0.06023560599112088f, 0.6976963061752597f, 0.2614474506242501f, 0.838729485096104f], \"my_varchar\": \"你好\"}", JsonObject.class)
        );

        InsertReq insertReq = InsertReq.builder()
                .collectionName("customized_setup_1")
                .data(data)
                .build();

        InsertResp insertResp = client.insert(insertReq);
        System.out.println(gson.toJson(insertResp));
        // {
        //  "InsertCnt": 2,
        //  "primaryKeys": [
        //    0,
        //    1
        //  ]
        // }
    }

    @Test
    public void insert_entity_into_partition() {
        List<JsonObject> data = Arrays.asList(
                gson.fromJson("{\"my_id\": 2, \"my_vector\": [0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f], \"my_varchar\": \"hello world\"}", JsonObject.class),
                gson.fromJson("{\"my_id\": 3, \"my_vector\": [0.19886812562848388f, 0.06023560599112088f, 0.6976963061752597f, 0.2614474506242501f, 0.838729485096104f], \"my_varchar\": \"你好\"}", JsonObject.class)
        );
        InsertReq insertReq = InsertReq.builder()
                .collectionName("customized_setup_1")
                .partitionName("partitionA")  // 指定 partition，需要提前创建 partition
                .data(data)
                .build();
        InsertResp insertResp = client.insert(insertReq);
        System.out.println(gson.toJson(insertResp));
    }

    // --------------------------------------------------
    // Basic ANN Search
    // --------------------------------------------------
    @Test
    public void single_vector_search() {
        FloatVec queryVector = new FloatVec(new float[]{0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f});
        SearchReq searchReq = SearchReq.builder()
                .collectionName("customized_setup_1")
                .data(Collections.singletonList(queryVector))
                .topK(3)
                .build();

        SearchResp searchResp = client.search(searchReq);

        List<List<SearchResp.SearchResult>> searchResults = searchResp.getSearchResults();
        for (List<SearchResp.SearchResult> results : searchResults) {
            System.out.println("TopK results:");
            for (SearchResp.SearchResult result : results) {
                System.out.println(result);
            }
        }
    }

    @AfterEach
    void tearDown() {
        client.close();
    }
}
